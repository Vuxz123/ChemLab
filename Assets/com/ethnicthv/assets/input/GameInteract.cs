//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/com/ethnicthv/assets/input/GameInteract.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace com.ethnicthv.assets.input
{
    public partial class @GameInteract: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInteract()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInteract"",
    ""maps"": [
        {
            ""name"": ""GameEnvironment"",
            ""id"": ""dddfaf60-b1c5-4100-845e-b815fcb14636"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""6113ad4e-e440-4b37-9e8c-54188247b012"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""a50b0826-939f-46c2-89fa-44bb32763c6c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Options"",
                    ""type"": ""Button"",
                    ""id"": ""6ce51a27-4f04-4e29-98e7-f324e7661f4f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bfc8177a-1d49-4445-97a4-98fe84c962c8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc6880b7-a073-4ff2-a7c6-e7e359e0057f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50c14055-8453-4cc3-9463-5d53fbfb250e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Options"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GameEnvironment
            m_GameEnvironment = asset.FindActionMap("GameEnvironment", throwIfNotFound: true);
            m_GameEnvironment_Interact = m_GameEnvironment.FindAction("Interact", throwIfNotFound: true);
            m_GameEnvironment_Hold = m_GameEnvironment.FindAction("Hold", throwIfNotFound: true);
            m_GameEnvironment_Options = m_GameEnvironment.FindAction("Options", throwIfNotFound: true);
        }

        ~@GameInteract()
        {
            UnityEngine.Debug.Assert(!m_GameEnvironment.enabled, "This will cause a leak and performance issues, GameInteract.GameEnvironment.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GameEnvironment
        private readonly InputActionMap m_GameEnvironment;
        private List<IGameEnvironmentActions> m_GameEnvironmentActionsCallbackInterfaces = new List<IGameEnvironmentActions>();
        private readonly InputAction m_GameEnvironment_Interact;
        private readonly InputAction m_GameEnvironment_Hold;
        private readonly InputAction m_GameEnvironment_Options;
        public struct GameEnvironmentActions
        {
            private @GameInteract m_Wrapper;
            public GameEnvironmentActions(@GameInteract wrapper) { m_Wrapper = wrapper; }
            public InputAction @Interact => m_Wrapper.m_GameEnvironment_Interact;
            public InputAction @Hold => m_Wrapper.m_GameEnvironment_Hold;
            public InputAction @Options => m_Wrapper.m_GameEnvironment_Options;
            public InputActionMap Get() { return m_Wrapper.m_GameEnvironment; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameEnvironmentActions set) { return set.Get(); }
            public void AddCallbacks(IGameEnvironmentActions instance)
            {
                if (instance == null || m_Wrapper.m_GameEnvironmentActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameEnvironmentActionsCallbackInterfaces.Add(instance);
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Hold.started += instance.OnHold;
                @Hold.performed += instance.OnHold;
                @Hold.canceled += instance.OnHold;
                @Options.started += instance.OnOptions;
                @Options.performed += instance.OnOptions;
                @Options.canceled += instance.OnOptions;
            }

            private void UnregisterCallbacks(IGameEnvironmentActions instance)
            {
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
                @Hold.started -= instance.OnHold;
                @Hold.performed -= instance.OnHold;
                @Hold.canceled -= instance.OnHold;
                @Options.started -= instance.OnOptions;
                @Options.performed -= instance.OnOptions;
                @Options.canceled -= instance.OnOptions;
            }

            public void RemoveCallbacks(IGameEnvironmentActions instance)
            {
                if (m_Wrapper.m_GameEnvironmentActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameEnvironmentActions instance)
            {
                foreach (var item in m_Wrapper.m_GameEnvironmentActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameEnvironmentActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameEnvironmentActions @GameEnvironment => new GameEnvironmentActions(this);
        public interface IGameEnvironmentActions
        {
            void OnInteract(InputAction.CallbackContext context);
            void OnHold(InputAction.CallbackContext context);
            void OnOptions(InputAction.CallbackContext context);
        }
    }
}
